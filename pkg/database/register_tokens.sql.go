// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: register_tokens.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO register_tokens (username)
VALUES ($1)
RETURNING id, created_at, updated_at, username, used
`

func (q *Queries) CreateToken(ctx context.Context, username string) (RegisterToken, error) {
	row := q.db.QueryRow(ctx, createToken, username)
	var i RegisterToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Used,
	)
	return i, err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, created_at, updated_at, username, used FROM register_tokens
WHERE id = $1
`

func (q *Queries) GetTokenByID(ctx context.Context, id pgtype.UUID) (RegisterToken, error) {
	row := q.db.QueryRow(ctx, getTokenByID, id)
	var i RegisterToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Used,
	)
	return i, err
}

const setTokenUsed = `-- name: SetTokenUsed :exec
UPDATE register_tokens
SET used = true,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) SetTokenUsed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, setTokenUsed, id)
	return err
}
